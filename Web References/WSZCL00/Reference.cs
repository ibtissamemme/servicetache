//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// Ce code source a été automatiquement généré par Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace sfwServiceTache.WSZCL00 {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WSZCL00Soap", Namespace="http://tempuri.org/")]
    public partial class WSZCL00 : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private Authentication authenticationValueField;
        
        private System.Threading.SendOrPostCallback AuthenticateUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback HelloWorldOperationCompleted;
        
        private System.Threading.SendOrPostCallback HelloWorldZCLOperationCompleted;
        
        private System.Threading.SendOrPostCallback listeInfoTargetOperationCompleted;
        
        private System.Threading.SendOrPostCallback listeBadgesOperationCompleted;
        
        private System.Threading.SendOrPostCallback listeBadgesDisponiblesOperationCompleted;
        
        private System.Threading.SendOrPostCallback listeProfilsOperationCompleted;
        
        private System.Threading.SendOrPostCallback verifBadgeOperationCompleted;
        
        private System.Threading.SendOrPostCallback entrerOperationCompleted;
        
        private System.Threading.SendOrPostCallback revalidationOperationCompleted;
        
        private System.Threading.SendOrPostCallback sortirOperationCompleted;
        
        private System.Threading.SendOrPostCallback verifierSortiesCTRLOperationCompleted;
        
        private System.Threading.SendOrPostCallback synchroOperationCompleted;
        
        private System.Threading.SendOrPostCallback copieFichierOperationCompleted;
        
        private System.Threading.SendOrPostCallback importLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback importProfilCtrlOperationCompleted;
        
        private System.Threading.SendOrPostCallback horsToResidantOperationCompleted;
        
        private System.Threading.SendOrPostCallback entrerLmpOperationCompleted;
        
        private System.Threading.SendOrPostCallback sortieLmpOperationCompleted;
        
        private System.Threading.SendOrPostCallback setInfoTargetOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSQLOperationCompleted;
        
        private System.Threading.SendOrPostCallback setSQLOperationCompleted;
        
        private System.Threading.SendOrPostCallback getZCLParamOperationCompleted;
        
        private System.Threading.SendOrPostCallback setZCLParamOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSitesNonTraiteOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSitesTraiteNowOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WSZCL00() {
            this.Url = global::sfwServiceTache.Properties.Settings.Default.sfwServiceTache_WSZCL00_WSZCL00;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public Authentication AuthenticationValue {
            get {
                return this.authenticationValueField;
            }
            set {
                this.authenticationValueField = value;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event AuthenticateUserCompletedEventHandler AuthenticateUserCompleted;
        
        /// <remarks/>
        public event HelloWorldCompletedEventHandler HelloWorldCompleted;
        
        /// <remarks/>
        public event HelloWorldZCLCompletedEventHandler HelloWorldZCLCompleted;
        
        /// <remarks/>
        public event listeInfoTargetCompletedEventHandler listeInfoTargetCompleted;
        
        /// <remarks/>
        public event listeBadgesCompletedEventHandler listeBadgesCompleted;
        
        /// <remarks/>
        public event listeBadgesDisponiblesCompletedEventHandler listeBadgesDisponiblesCompleted;
        
        /// <remarks/>
        public event listeProfilsCompletedEventHandler listeProfilsCompleted;
        
        /// <remarks/>
        public event verifBadgeCompletedEventHandler verifBadgeCompleted;
        
        /// <remarks/>
        public event entrerCompletedEventHandler entrerCompleted;
        
        /// <remarks/>
        public event revalidationCompletedEventHandler revalidationCompleted;
        
        /// <remarks/>
        public event sortirCompletedEventHandler sortirCompleted;
        
        /// <remarks/>
        public event verifierSortiesCTRLCompletedEventHandler verifierSortiesCTRLCompleted;
        
        /// <remarks/>
        public event synchroCompletedEventHandler synchroCompleted;
        
        /// <remarks/>
        public event copieFichierCompletedEventHandler copieFichierCompleted;
        
        /// <remarks/>
        public event importLogCompletedEventHandler importLogCompleted;
        
        /// <remarks/>
        public event importProfilCtrlCompletedEventHandler importProfilCtrlCompleted;
        
        /// <remarks/>
        public event horsToResidantCompletedEventHandler horsToResidantCompleted;
        
        /// <remarks/>
        public event entrerLmpCompletedEventHandler entrerLmpCompleted;
        
        /// <remarks/>
        public event sortieLmpCompletedEventHandler sortieLmpCompleted;
        
        /// <remarks/>
        public event setInfoTargetCompletedEventHandler setInfoTargetCompleted;
        
        /// <remarks/>
        public event getSQLCompletedEventHandler getSQLCompleted;
        
        /// <remarks/>
        public event setSQLCompletedEventHandler setSQLCompleted;
        
        /// <remarks/>
        public event getZCLParamCompletedEventHandler getZCLParamCompleted;
        
        /// <remarks/>
        public event setZCLParamCompletedEventHandler setZCLParamCompleted;
        
        /// <remarks/>
        public event getSitesNonTraiteCompletedEventHandler getSitesNonTraiteCompleted;
        
        /// <remarks/>
        public event getSitesTraiteNowCompletedEventHandler getSitesTraiteNowCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AuthenticateUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AuthenticateUser() {
            object[] results = this.Invoke("AuthenticateUser", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AuthenticateUserAsync() {
            this.AuthenticateUserAsync(null);
        }
        
        /// <remarks/>
        public void AuthenticateUserAsync(object userState) {
            if ((this.AuthenticateUserOperationCompleted == null)) {
                this.AuthenticateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthenticateUserOperationCompleted);
            }
            this.InvokeAsync("AuthenticateUser", new object[0], this.AuthenticateUserOperationCompleted, userState);
        }
        
        private void OnAuthenticateUserOperationCompleted(object arg) {
            if ((this.AuthenticateUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthenticateUserCompleted(this, new AuthenticateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HelloWorld", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HelloWorld() {
            object[] results = this.Invoke("HelloWorld", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void HelloWorldAsync() {
            this.HelloWorldAsync(null);
        }
        
        /// <remarks/>
        public void HelloWorldAsync(object userState) {
            if ((this.HelloWorldOperationCompleted == null)) {
                this.HelloWorldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHelloWorldOperationCompleted);
            }
            this.InvokeAsync("HelloWorld", new object[0], this.HelloWorldOperationCompleted, userState);
        }
        
        private void OnHelloWorldOperationCompleted(object arg) {
            if ((this.HelloWorldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HelloWorldCompleted(this, new HelloWorldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HelloWorldZCL", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HelloWorldZCL(string siteID) {
            object[] results = this.Invoke("HelloWorldZCL", new object[] {
                        siteID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void HelloWorldZCLAsync(string siteID) {
            this.HelloWorldZCLAsync(siteID, null);
        }
        
        /// <remarks/>
        public void HelloWorldZCLAsync(string siteID, object userState) {
            if ((this.HelloWorldZCLOperationCompleted == null)) {
                this.HelloWorldZCLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHelloWorldZCLOperationCompleted);
            }
            this.InvokeAsync("HelloWorldZCL", new object[] {
                        siteID}, this.HelloWorldZCLOperationCompleted, userState);
        }
        
        private void OnHelloWorldZCLOperationCompleted(object arg) {
            if ((this.HelloWorldZCLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HelloWorldZCLCompleted(this, new HelloWorldZCLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/listeInfoTarget", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] listeInfoTarget(string nomPoste, string target, string search) {
            object[] results = this.Invoke("listeInfoTarget", new object[] {
                        nomPoste,
                        target,
                        search});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void listeInfoTargetAsync(string nomPoste, string target, string search) {
            this.listeInfoTargetAsync(nomPoste, target, search, null);
        }
        
        /// <remarks/>
        public void listeInfoTargetAsync(string nomPoste, string target, string search, object userState) {
            if ((this.listeInfoTargetOperationCompleted == null)) {
                this.listeInfoTargetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnlisteInfoTargetOperationCompleted);
            }
            this.InvokeAsync("listeInfoTarget", new object[] {
                        nomPoste,
                        target,
                        search}, this.listeInfoTargetOperationCompleted, userState);
        }
        
        private void OnlisteInfoTargetOperationCompleted(object arg) {
            if ((this.listeInfoTargetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.listeInfoTargetCompleted(this, new listeInfoTargetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/listeBadges", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] listeBadges(string nomPoste) {
            object[] results = this.Invoke("listeBadges", new object[] {
                        nomPoste});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void listeBadgesAsync(string nomPoste) {
            this.listeBadgesAsync(nomPoste, null);
        }
        
        /// <remarks/>
        public void listeBadgesAsync(string nomPoste, object userState) {
            if ((this.listeBadgesOperationCompleted == null)) {
                this.listeBadgesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnlisteBadgesOperationCompleted);
            }
            this.InvokeAsync("listeBadges", new object[] {
                        nomPoste}, this.listeBadgesOperationCompleted, userState);
        }
        
        private void OnlisteBadgesOperationCompleted(object arg) {
            if ((this.listeBadgesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.listeBadgesCompleted(this, new listeBadgesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/listeBadgesDisponibles", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] listeBadgesDisponibles(string nomPoste) {
            object[] results = this.Invoke("listeBadgesDisponibles", new object[] {
                        nomPoste});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void listeBadgesDisponiblesAsync(string nomPoste) {
            this.listeBadgesDisponiblesAsync(nomPoste, null);
        }
        
        /// <remarks/>
        public void listeBadgesDisponiblesAsync(string nomPoste, object userState) {
            if ((this.listeBadgesDisponiblesOperationCompleted == null)) {
                this.listeBadgesDisponiblesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnlisteBadgesDisponiblesOperationCompleted);
            }
            this.InvokeAsync("listeBadgesDisponibles", new object[] {
                        nomPoste}, this.listeBadgesDisponiblesOperationCompleted, userState);
        }
        
        private void OnlisteBadgesDisponiblesOperationCompleted(object arg) {
            if ((this.listeBadgesDisponiblesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.listeBadgesDisponiblesCompleted(this, new listeBadgesDisponiblesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/listeProfils", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] listeProfils(string nomPoste, string residantID) {
            object[] results = this.Invoke("listeProfils", new object[] {
                        nomPoste,
                        residantID});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void listeProfilsAsync(string nomPoste, string residantID) {
            this.listeProfilsAsync(nomPoste, residantID, null);
        }
        
        /// <remarks/>
        public void listeProfilsAsync(string nomPoste, string residantID, object userState) {
            if ((this.listeProfilsOperationCompleted == null)) {
                this.listeProfilsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnlisteProfilsOperationCompleted);
            }
            this.InvokeAsync("listeProfils", new object[] {
                        nomPoste,
                        residantID}, this.listeProfilsOperationCompleted, userState);
        }
        
        private void OnlisteProfilsOperationCompleted(object arg) {
            if ((this.listeProfilsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.listeProfilsCompleted(this, new listeProfilsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/verifBadge", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string verifBadge(string nomPoste, string badgePhysique, string numVisite) {
            object[] results = this.Invoke("verifBadge", new object[] {
                        nomPoste,
                        badgePhysique,
                        numVisite});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void verifBadgeAsync(string nomPoste, string badgePhysique, string numVisite) {
            this.verifBadgeAsync(nomPoste, badgePhysique, numVisite, null);
        }
        
        /// <remarks/>
        public void verifBadgeAsync(string nomPoste, string badgePhysique, string numVisite, object userState) {
            if ((this.verifBadgeOperationCompleted == null)) {
                this.verifBadgeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnverifBadgeOperationCompleted);
            }
            this.InvokeAsync("verifBadge", new object[] {
                        nomPoste,
                        badgePhysique,
                        numVisite}, this.verifBadgeOperationCompleted, userState);
        }
        
        private void OnverifBadgeOperationCompleted(object arg) {
            if ((this.verifBadgeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.verifBadgeCompleted(this, new verifBadgeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/entrer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string entrer(string nomPoste, string visiteurID, string residantID, string badgeLogique, string badgePhysique, string profil, string datedebut, string datefin, string visiteID) {
            object[] results = this.Invoke("entrer", new object[] {
                        nomPoste,
                        visiteurID,
                        residantID,
                        badgeLogique,
                        badgePhysique,
                        profil,
                        datedebut,
                        datefin,
                        visiteID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void entrerAsync(string nomPoste, string visiteurID, string residantID, string badgeLogique, string badgePhysique, string profil, string datedebut, string datefin, string visiteID) {
            this.entrerAsync(nomPoste, visiteurID, residantID, badgeLogique, badgePhysique, profil, datedebut, datefin, visiteID, null);
        }
        
        /// <remarks/>
        public void entrerAsync(string nomPoste, string visiteurID, string residantID, string badgeLogique, string badgePhysique, string profil, string datedebut, string datefin, string visiteID, object userState) {
            if ((this.entrerOperationCompleted == null)) {
                this.entrerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnentrerOperationCompleted);
            }
            this.InvokeAsync("entrer", new object[] {
                        nomPoste,
                        visiteurID,
                        residantID,
                        badgeLogique,
                        badgePhysique,
                        profil,
                        datedebut,
                        datefin,
                        visiteID}, this.entrerOperationCompleted, userState);
        }
        
        private void OnentrerOperationCompleted(object arg) {
            if ((this.entrerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.entrerCompleted(this, new entrerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/revalidation", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string revalidation(string nomPoste, string visiteID, string profil, string date) {
            object[] results = this.Invoke("revalidation", new object[] {
                        nomPoste,
                        visiteID,
                        profil,
                        date});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void revalidationAsync(string nomPoste, string visiteID, string profil, string date) {
            this.revalidationAsync(nomPoste, visiteID, profil, date, null);
        }
        
        /// <remarks/>
        public void revalidationAsync(string nomPoste, string visiteID, string profil, string date, object userState) {
            if ((this.revalidationOperationCompleted == null)) {
                this.revalidationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrevalidationOperationCompleted);
            }
            this.InvokeAsync("revalidation", new object[] {
                        nomPoste,
                        visiteID,
                        profil,
                        date}, this.revalidationOperationCompleted, userState);
        }
        
        private void OnrevalidationOperationCompleted(object arg) {
            if ((this.revalidationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.revalidationCompleted(this, new revalidationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/sortir", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string sortir(string nomPoste, string badgeLogique, string badgePhysique, string visiteID) {
            object[] results = this.Invoke("sortir", new object[] {
                        nomPoste,
                        badgeLogique,
                        badgePhysique,
                        visiteID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void sortirAsync(string nomPoste, string badgeLogique, string badgePhysique, string visiteID) {
            this.sortirAsync(nomPoste, badgeLogique, badgePhysique, visiteID, null);
        }
        
        /// <remarks/>
        public void sortirAsync(string nomPoste, string badgeLogique, string badgePhysique, string visiteID, object userState) {
            if ((this.sortirOperationCompleted == null)) {
                this.sortirOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsortirOperationCompleted);
            }
            this.InvokeAsync("sortir", new object[] {
                        nomPoste,
                        badgeLogique,
                        badgePhysique,
                        visiteID}, this.sortirOperationCompleted, userState);
        }
        
        private void OnsortirOperationCompleted(object arg) {
            if ((this.sortirCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sortirCompleted(this, new sortirCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/verifierSortiesCTRL", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string verifierSortiesCTRL(string telemAccess) {
            object[] results = this.Invoke("verifierSortiesCTRL", new object[] {
                        telemAccess});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void verifierSortiesCTRLAsync(string telemAccess) {
            this.verifierSortiesCTRLAsync(telemAccess, null);
        }
        
        /// <remarks/>
        public void verifierSortiesCTRLAsync(string telemAccess, object userState) {
            if ((this.verifierSortiesCTRLOperationCompleted == null)) {
                this.verifierSortiesCTRLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnverifierSortiesCTRLOperationCompleted);
            }
            this.InvokeAsync("verifierSortiesCTRL", new object[] {
                        telemAccess}, this.verifierSortiesCTRLOperationCompleted, userState);
        }
        
        private void OnverifierSortiesCTRLOperationCompleted(object arg) {
            if ((this.verifierSortiesCTRLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.verifierSortiesCTRLCompleted(this, new verifierSortiesCTRLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/synchro", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string synchro(string telemAccess) {
            object[] results = this.Invoke("synchro", new object[] {
                        telemAccess});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void synchroAsync(string telemAccess) {
            this.synchroAsync(telemAccess, null);
        }
        
        /// <remarks/>
        public void synchroAsync(string telemAccess, object userState) {
            if ((this.synchroOperationCompleted == null)) {
                this.synchroOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsynchroOperationCompleted);
            }
            this.InvokeAsync("synchro", new object[] {
                        telemAccess}, this.synchroOperationCompleted, userState);
        }
        
        private void OnsynchroOperationCompleted(object arg) {
            if ((this.synchroCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.synchroCompleted(this, new synchroCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/copieFichier", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string copieFichier(string telemAccess) {
            object[] results = this.Invoke("copieFichier", new object[] {
                        telemAccess});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void copieFichierAsync(string telemAccess) {
            this.copieFichierAsync(telemAccess, null);
        }
        
        /// <remarks/>
        public void copieFichierAsync(string telemAccess, object userState) {
            if ((this.copieFichierOperationCompleted == null)) {
                this.copieFichierOperationCompleted = new System.Threading.SendOrPostCallback(this.OncopieFichierOperationCompleted);
            }
            this.InvokeAsync("copieFichier", new object[] {
                        telemAccess}, this.copieFichierOperationCompleted, userState);
        }
        
        private void OncopieFichierOperationCompleted(object arg) {
            if ((this.copieFichierCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.copieFichierCompleted(this, new copieFichierCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/importLog", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string importLog(string nomPoste, string lastDate) {
            object[] results = this.Invoke("importLog", new object[] {
                        nomPoste,
                        lastDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void importLogAsync(string nomPoste, string lastDate) {
            this.importLogAsync(nomPoste, lastDate, null);
        }
        
        /// <remarks/>
        public void importLogAsync(string nomPoste, string lastDate, object userState) {
            if ((this.importLogOperationCompleted == null)) {
                this.importLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnimportLogOperationCompleted);
            }
            this.InvokeAsync("importLog", new object[] {
                        nomPoste,
                        lastDate}, this.importLogOperationCompleted, userState);
        }
        
        private void OnimportLogOperationCompleted(object arg) {
            if ((this.importLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.importLogCompleted(this, new importLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/importProfilCtrl", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string importProfilCtrl(string telemAccess) {
            object[] results = this.Invoke("importProfilCtrl", new object[] {
                        telemAccess});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void importProfilCtrlAsync(string telemAccess) {
            this.importProfilCtrlAsync(telemAccess, null);
        }
        
        /// <remarks/>
        public void importProfilCtrlAsync(string telemAccess, object userState) {
            if ((this.importProfilCtrlOperationCompleted == null)) {
                this.importProfilCtrlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnimportProfilCtrlOperationCompleted);
            }
            this.InvokeAsync("importProfilCtrl", new object[] {
                        telemAccess}, this.importProfilCtrlOperationCompleted, userState);
        }
        
        private void OnimportProfilCtrlOperationCompleted(object arg) {
            if ((this.importProfilCtrlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.importProfilCtrlCompleted(this, new importProfilCtrlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/horsToResidant", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string horsToResidant(string nomPoste, string search) {
            object[] results = this.Invoke("horsToResidant", new object[] {
                        nomPoste,
                        search});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void horsToResidantAsync(string nomPoste, string search) {
            this.horsToResidantAsync(nomPoste, search, null);
        }
        
        /// <remarks/>
        public void horsToResidantAsync(string nomPoste, string search, object userState) {
            if ((this.horsToResidantOperationCompleted == null)) {
                this.horsToResidantOperationCompleted = new System.Threading.SendOrPostCallback(this.OnhorsToResidantOperationCompleted);
            }
            this.InvokeAsync("horsToResidant", new object[] {
                        nomPoste,
                        search}, this.horsToResidantOperationCompleted, userState);
        }
        
        private void OnhorsToResidantOperationCompleted(object arg) {
            if ((this.horsToResidantCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.horsToResidantCompleted(this, new horsToResidantCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/entrerLmp", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string entrerLmp(string telemAccess) {
            object[] results = this.Invoke("entrerLmp", new object[] {
                        telemAccess});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void entrerLmpAsync(string telemAccess) {
            this.entrerLmpAsync(telemAccess, null);
        }
        
        /// <remarks/>
        public void entrerLmpAsync(string telemAccess, object userState) {
            if ((this.entrerLmpOperationCompleted == null)) {
                this.entrerLmpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnentrerLmpOperationCompleted);
            }
            this.InvokeAsync("entrerLmp", new object[] {
                        telemAccess}, this.entrerLmpOperationCompleted, userState);
        }
        
        private void OnentrerLmpOperationCompleted(object arg) {
            if ((this.entrerLmpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.entrerLmpCompleted(this, new entrerLmpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/sortieLmp", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string sortieLmp(string telemAccess) {
            object[] results = this.Invoke("sortieLmp", new object[] {
                        telemAccess});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void sortieLmpAsync(string telemAccess) {
            this.sortieLmpAsync(telemAccess, null);
        }
        
        /// <remarks/>
        public void sortieLmpAsync(string telemAccess, object userState) {
            if ((this.sortieLmpOperationCompleted == null)) {
                this.sortieLmpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsortieLmpOperationCompleted);
            }
            this.InvokeAsync("sortieLmp", new object[] {
                        telemAccess}, this.sortieLmpOperationCompleted, userState);
        }
        
        private void OnsortieLmpOperationCompleted(object arg) {
            if ((this.sortieLmpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sortieLmpCompleted(this, new sortieLmpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/setInfoTarget", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string setInfoTarget(string siteID, string target, string info) {
            object[] results = this.Invoke("setInfoTarget", new object[] {
                        siteID,
                        target,
                        info});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void setInfoTargetAsync(string siteID, string target, string info) {
            this.setInfoTargetAsync(siteID, target, info, null);
        }
        
        /// <remarks/>
        public void setInfoTargetAsync(string siteID, string target, string info, object userState) {
            if ((this.setInfoTargetOperationCompleted == null)) {
                this.setInfoTargetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetInfoTargetOperationCompleted);
            }
            this.InvokeAsync("setInfoTarget", new object[] {
                        siteID,
                        target,
                        info}, this.setInfoTargetOperationCompleted, userState);
        }
        
        private void OnsetInfoTargetOperationCompleted(object arg) {
            if ((this.setInfoTargetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setInfoTargetCompleted(this, new setInfoTargetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getSQL", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] getSQL() {
            object[] results = this.Invoke("getSQL", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getSQLAsync() {
            this.getSQLAsync(null);
        }
        
        /// <remarks/>
        public void getSQLAsync(object userState) {
            if ((this.getSQLOperationCompleted == null)) {
                this.getSQLOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSQLOperationCompleted);
            }
            this.InvokeAsync("getSQL", new object[0], this.getSQLOperationCompleted, userState);
        }
        
        private void OngetSQLOperationCompleted(object arg) {
            if ((this.getSQLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSQLCompleted(this, new getSQLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/setSQL", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string setSQL(string connectionString, string user, string pwd, string server, string type) {
            object[] results = this.Invoke("setSQL", new object[] {
                        connectionString,
                        user,
                        pwd,
                        server,
                        type});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void setSQLAsync(string connectionString, string user, string pwd, string server, string type) {
            this.setSQLAsync(connectionString, user, pwd, server, type, null);
        }
        
        /// <remarks/>
        public void setSQLAsync(string connectionString, string user, string pwd, string server, string type, object userState) {
            if ((this.setSQLOperationCompleted == null)) {
                this.setSQLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetSQLOperationCompleted);
            }
            this.InvokeAsync("setSQL", new object[] {
                        connectionString,
                        user,
                        pwd,
                        server,
                        type}, this.setSQLOperationCompleted, userState);
        }
        
        private void OnsetSQLOperationCompleted(object arg) {
            if ((this.setSQLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setSQLCompleted(this, new setSQLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getZCLParam", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfString")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(NestingLevel=1)]
        public string[][] getZCLParam(string siteID) {
            object[] results = this.Invoke("getZCLParam", new object[] {
                        siteID});
            return ((string[][])(results[0]));
        }
        
        /// <remarks/>
        public void getZCLParamAsync(string siteID) {
            this.getZCLParamAsync(siteID, null);
        }
        
        /// <remarks/>
        public void getZCLParamAsync(string siteID, object userState) {
            if ((this.getZCLParamOperationCompleted == null)) {
                this.getZCLParamOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetZCLParamOperationCompleted);
            }
            this.InvokeAsync("getZCLParam", new object[] {
                        siteID}, this.getZCLParamOperationCompleted, userState);
        }
        
        private void OngetZCLParamOperationCompleted(object arg) {
            if ((this.getZCLParamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getZCLParamCompleted(this, new getZCLParamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/setZCLParam", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string setZCLParam(string siteID, string[] parametres) {
            object[] results = this.Invoke("setZCLParam", new object[] {
                        siteID,
                        parametres});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void setZCLParamAsync(string siteID, string[] parametres) {
            this.setZCLParamAsync(siteID, parametres, null);
        }
        
        /// <remarks/>
        public void setZCLParamAsync(string siteID, string[] parametres, object userState) {
            if ((this.setZCLParamOperationCompleted == null)) {
                this.setZCLParamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetZCLParamOperationCompleted);
            }
            this.InvokeAsync("setZCLParam", new object[] {
                        siteID,
                        parametres}, this.setZCLParamOperationCompleted, userState);
        }
        
        private void OnsetZCLParamOperationCompleted(object arg) {
            if ((this.setZCLParamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setZCLParamCompleted(this, new setZCLParamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getSitesNonTraite", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] getSitesNonTraite(string telemAccess) {
            object[] results = this.Invoke("getSitesNonTraite", new object[] {
                        telemAccess});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getSitesNonTraiteAsync(string telemAccess) {
            this.getSitesNonTraiteAsync(telemAccess, null);
        }
        
        /// <remarks/>
        public void getSitesNonTraiteAsync(string telemAccess, object userState) {
            if ((this.getSitesNonTraiteOperationCompleted == null)) {
                this.getSitesNonTraiteOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSitesNonTraiteOperationCompleted);
            }
            this.InvokeAsync("getSitesNonTraite", new object[] {
                        telemAccess}, this.getSitesNonTraiteOperationCompleted, userState);
        }
        
        private void OngetSitesNonTraiteOperationCompleted(object arg) {
            if ((this.getSitesNonTraiteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSitesNonTraiteCompleted(this, new getSitesNonTraiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getSitesTraiteNow", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getSitesTraiteNow(string Entree) {
            object[] results = this.Invoke("getSitesTraiteNow", new object[] {
                        Entree});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getSitesTraiteNowAsync(string Entree) {
            this.getSitesTraiteNowAsync(Entree, null);
        }
        
        /// <remarks/>
        public void getSitesTraiteNowAsync(string Entree, object userState) {
            if ((this.getSitesTraiteNowOperationCompleted == null)) {
                this.getSitesTraiteNowOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSitesTraiteNowOperationCompleted);
            }
            this.InvokeAsync("getSitesTraiteNow", new object[] {
                        Entree}, this.getSitesTraiteNowOperationCompleted, userState);
        }
        
        private void OngetSitesTraiteNowOperationCompleted(object arg) {
            if ((this.getSitesTraiteNowCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSitesTraiteNowCompleted(this, new getSitesTraiteNowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://tempuri.org/", IsNullable=false)]
    public partial class Authentication : System.Web.Services.Protocols.SoapHeader {
        
        private string usernameField;
        
        private string passwordField;
        
        private string authenticatedTokenField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        public string Username {
            get {
                return this.usernameField;
            }
            set {
                this.usernameField = value;
            }
        }
        
        /// <remarks/>
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        public string AuthenticatedToken {
            get {
                return this.authenticatedTokenField;
            }
            set {
                this.authenticatedTokenField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void AuthenticateUserCompletedEventHandler(object sender, AuthenticateUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthenticateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthenticateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void HelloWorldCompletedEventHandler(object sender, HelloWorldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HelloWorldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HelloWorldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void HelloWorldZCLCompletedEventHandler(object sender, HelloWorldZCLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HelloWorldZCLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HelloWorldZCLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void listeInfoTargetCompletedEventHandler(object sender, listeInfoTargetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class listeInfoTargetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal listeInfoTargetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void listeBadgesCompletedEventHandler(object sender, listeBadgesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class listeBadgesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal listeBadgesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void listeBadgesDisponiblesCompletedEventHandler(object sender, listeBadgesDisponiblesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class listeBadgesDisponiblesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal listeBadgesDisponiblesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void listeProfilsCompletedEventHandler(object sender, listeProfilsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class listeProfilsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal listeProfilsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void verifBadgeCompletedEventHandler(object sender, verifBadgeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class verifBadgeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal verifBadgeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void entrerCompletedEventHandler(object sender, entrerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class entrerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal entrerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void revalidationCompletedEventHandler(object sender, revalidationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class revalidationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal revalidationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void sortirCompletedEventHandler(object sender, sortirCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sortirCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sortirCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void verifierSortiesCTRLCompletedEventHandler(object sender, verifierSortiesCTRLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class verifierSortiesCTRLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal verifierSortiesCTRLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void synchroCompletedEventHandler(object sender, synchroCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class synchroCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal synchroCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void copieFichierCompletedEventHandler(object sender, copieFichierCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class copieFichierCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal copieFichierCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void importLogCompletedEventHandler(object sender, importLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class importLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal importLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void importProfilCtrlCompletedEventHandler(object sender, importProfilCtrlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class importProfilCtrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal importProfilCtrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void horsToResidantCompletedEventHandler(object sender, horsToResidantCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class horsToResidantCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal horsToResidantCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void entrerLmpCompletedEventHandler(object sender, entrerLmpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class entrerLmpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal entrerLmpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void sortieLmpCompletedEventHandler(object sender, sortieLmpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sortieLmpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sortieLmpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void setInfoTargetCompletedEventHandler(object sender, setInfoTargetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setInfoTargetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setInfoTargetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void getSQLCompletedEventHandler(object sender, getSQLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSQLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSQLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void setSQLCompletedEventHandler(object sender, setSQLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setSQLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setSQLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void getZCLParamCompletedEventHandler(object sender, getZCLParamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getZCLParamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getZCLParamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[][] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[][])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void setZCLParamCompletedEventHandler(object sender, setZCLParamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setZCLParamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setZCLParamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void getSitesNonTraiteCompletedEventHandler(object sender, getSitesNonTraiteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSitesNonTraiteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSitesNonTraiteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void getSitesTraiteNowCompletedEventHandler(object sender, getSitesTraiteNowCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSitesTraiteNowCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSitesTraiteNowCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591